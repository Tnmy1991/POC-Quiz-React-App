{"version":3,"sources":["components/quiz-result.js","components/quiz-layout.js","App.js","serviceWorker.js","index.js"],"names":["QuizResult","title","ls","get","data","Fragment","map","item","status","point","class","correct_ans","React","Component","QuizLayout","props","state","slide","questions","result","myRef","createRef","axios","then","res","setState","remove","set","length","catch","error","console","log","index","elements","this","current","HTMLElement","childs","querySelectorAll","querySelector","classList","forEach","elem","key","add","question_id","option_key","e","preventDefault","saveData","toggleSlide","method","url","answer","msg","showPrev","showNext","showSubmit","ref","className","question","_id","options","option","onClick","receiveAns","label","previousQuestion","nextQuestion","prepareResult","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4efeabb1.chunk.js","sourcesContent":["import React from 'react';\nimport ls from 'local-storage';\n\nclass QuizResult extends React.Component{\n  render() {\n    let title = ls.get('quiz_submission_title');\n    let data  = ls.get('quiz_submission_data');\n\n    return(\n      <React.Fragment>\n        <h1>{title}</h1>\n        <ol>\n          {data.map((item) => (\n            <li>\n              {item.status ? (\n                <React.Fragment>\n                  +{item.point}\n                  <span class=\"details\">Correct</span>\n                </React.Fragment>\n              ) : (\n                <React.Fragment>\n                  +0\n                  <span class=\"details\">Correct answer is {item.correct_ans}</span>\n                </React.Fragment>\n              )}\n            </li>\n          ))}\n        </ol>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default QuizResult;","import React from 'react';\nimport axios from 'axios';\nimport ls from 'local-storage';\nimport QuizResult from './quiz-result';\n\nclass QuizLayout extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slide: 0,\n      questions: [],\n      result: false\n    };\n    this.myRef = React.createRef();\n  }\n\n  componentDidMount() {\n    axios.get('http://app-d6fd8297-67ce-4828-9612-73df119b5713.cleverapps.io/v1/init')\n    .then(res => {\n      this.setState({\n        questions: res.data\n      });\n      ls.remove('quiz_answer');\n      ls.set('quiz_questions_count', (res.data.length - 1));\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  toggleSlide(index) {\n    let elements = this.myRef.current;\n    if (elements instanceof HTMLElement) {\n      const childs = elements.querySelectorAll('.slide');\n      elements.querySelector('.active-slide').classList.remove('active-slide');\n      childs.forEach((elem, key) => {\n        if( key === index) {\n          elem.classList.add('active-slide');\n        }\n      });\n      this.setState({\n        slide: index\n      });\n    }\n  }\n\n  receiveAns( question_id, option_key, e) {\n    e.preventDefault();\n    let saveData = ls.get('quiz_answer');\n    if(saveData) {\n      saveData[question_id] = option_key;\n    } else {\n      let data = {};\n      data[question_id] = option_key;\n      saveData = data;\n    }\n    ls.set('quiz_answer', saveData);\n  }\n\n  previousQuestion(e) {\n    e.preventDefault();\n    let index = this.state.slide - 1;\n    this.toggleSlide(index);\n  }\n\n  nextQuestion(e) {\n    e.preventDefault();\n    let index = this.state.slide + 1;\n    this.toggleSlide(index);\n  }\n\n  prepareResult(e) {\n    e.preventDefault();\n    axios({\n      method: 'post',\n      url: 'http://app-d6fd8297-67ce-4828-9612-73df119b5713.cleverapps.io/v1/submission',\n      data: {\n        answer: ls.get('quiz_answer')\n      }\n    }).then(res => {\n      ls.remove('quiz_answer');\n      ls.remove('quiz_questions_count');\n      ls.set('quiz_submission_title', res.data.msg);\n      ls.set('quiz_submission_data', res.data.data);\n      this.setState({\n        result: true\n      })\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  render() {\n    const { slide, questions, result } = this.state;\n    let showPrev = slide > 0 ? 'show' : 'hide';\n    let showNext = slide < ls.get('quiz_questions_count') ? 'show' : 'hide';\n    let showSubmit = slide === ls.get('quiz_questions_count') ? 'show' : 'hide';\n\n    return(\n      !result ? (\n        <React.Fragment>\n          <div ref={this.myRef} className=\"quiz-container\">\n            {questions.map((question, index) => (\n              <div key={question._id} className={ index === 0 ? \"slide active-slide\" : \"slide\" }>\n                <div className=\"question\"> {question.question} </div>\n                <div className=\"answers\">\n                  {question.options.map(option => (\n                    <button onClick={(e) => this.receiveAns(question._id, option.key, e)} key={option.key}>{option.key}: {option.label}</button>\n                  ))}\n                </div>\n              </div>\n              \n            ))}\n          </div>\n          <button className={showPrev} onClick={(e) => this.previousQuestion(e)}>Previous Question</button>\n          <button className={showNext} onClick={(e) => this.nextQuestion(e)}>Next Question</button>\n          <button className={showSubmit} onClick={(e) => this.prepareResult(e)}>Submit Quiz</button>\n        </React.Fragment>\n      ) : (\n        <QuizResult></QuizResult>\n      )\n    )\n  }\n}\n\nexport default QuizLayout;","import React from 'react';\nimport QuizLayout from './components/quiz-layout';\nimport './App.css';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h1>Quiz on Important Facts</h1>\n      <QuizLayout></QuizLayout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}